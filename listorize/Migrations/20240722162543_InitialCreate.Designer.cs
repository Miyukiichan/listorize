// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using listorize.Model;

#nullable disable

namespace listorize.Migrations
{
    [DbContext(typeof(ListorizeContext))]
    [Migration("20240722162543_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("List");
                });

            modelBuilder.Entity("ListColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColumnType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ListId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LookupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("LookupId");

                    b.ToTable("ListColumn");
                });

            modelBuilder.Entity("ListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ListId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentListId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.HasIndex("NoteId");

                    b.ToTable("ListItem");
                });

            modelBuilder.Entity("ListValue", b =>
                {
                    b.Property<int>("ListItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ListColumnId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ListItemId", "ListColumnId");

                    b.HasIndex("ListColumnId");

                    b.ToTable("ListValue");
                });

            modelBuilder.Entity("Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lookup");
                });

            modelBuilder.Entity("LookupOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LookupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LookupId");

                    b.ToTable("LookupOption");
                });

            modelBuilder.Entity("Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("ListColumn", b =>
                {
                    b.HasOne("List", "List")
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId");

                    b.Navigation("List");

                    b.Navigation("Lookup");
                });

            modelBuilder.Entity("ListItem", b =>
                {
                    b.HasOne("List", "List")
                        .WithMany()
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.Navigation("List");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("ListValue", b =>
                {
                    b.HasOne("ListColumn", "ListColumn")
                        .WithMany()
                        .HasForeignKey("ListColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ListItem", "ListItem")
                        .WithMany()
                        .HasForeignKey("ListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListColumn");

                    b.Navigation("ListItem");
                });

            modelBuilder.Entity("LookupOption", b =>
                {
                    b.HasOne("Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("LookupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lookup");
                });
#pragma warning restore 612, 618
        }
    }
}
