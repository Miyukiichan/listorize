@page "/note/{id:int}"
@using Microsoft.EntityFrameworkCore
@using Model
@inject ListorizeContext db
@inject IJSRuntime js
@inject IDialogService dialogs
@inject ISnackbar snackbar

<PageTitle>@Title</PageTitle>

@if (Item is null || Item.Note is null) {
    <h1>Note not found</h1>
}
else {
    <h1>@Title</h1>
    <br />
    <MudButton Variant="Variant.Filled" OnClick="Submit">Save</MudButton>
    <br />
    <br />
    <div>
        <textarea id="editor" readonly>@Item.Note.Body</textarea>
    </div>
}


@code {
    [Parameter] public int Id { get; set; }
    private Item? Item { get; set; }
    string Title = "Note";
    protected override async Task OnInitializedAsync() {
        Item = await db.Items.Include(x => x.Note).FirstOrDefaultAsync(x => x.Id == Id);
        if (Item is not null) {
            Title = $"Note - {Item.Name}";
            StateHasChanged();
        }
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        // Need to re-render every time otherwise the textarea does not become a MD editor
        if (Item is not null) {
            await js.InvokeVoidAsync("initMarkdown");
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    async Task Submit() {
        if (Item is null || Item.Note is null) return;
        //Can't bind this to the textarea control so need to get the value explicitly
        Item.Note.Body = await js.InvokeAsync<string>("markdownValue");
        db.Notes.Update(Item.Note);
        var changes = db.SaveChanges();
        if (changes < 1) {
            await dialogs.ShowMessageBox("Error", "Failed to save changes");
        }
        else {
            snackbar.Add("Note updated", Severity.Success);
        }
    }
}
